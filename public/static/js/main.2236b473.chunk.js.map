{"version":3,"sources":["Config.js","components/Issue.js","components/IssueList.js","components/IssueDetails.js","App.js","serviceWorker.js","index.js"],"names":["CONFIG","apiUrl","issueStates","Issue","Card","className","Body","Title","to","pathname","this","props","data","issueID","issueName","Text","issueDescription","substring","length","Component","IssueList","loaded","payload","error","setState","state","loading","issues","loadData","callback","fetch","config","then","response","json","map","index","key","filter","issue","issueState","idx","IssueDetails","create","event","preventDefault","method","headers","body","JSON","stringify","alert","created","update","remove","deleted","changeIssueName","target","value","modified","changeIssueDescription","changeIssueState","issueModifiedDate","match","params","createButton","Button","variant","type","onClick","updateButtons","buttons","Form","Group","Label","Control","onChange","as","rows","console","log","indexOf","App","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Brand","Link","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2236b473.chunk.js","sourcesContent":["const CONFIG = {\n   apiUrl: 'http://localhost:3001/api/v1',\n   issueStates: ['open', 'pending', 'closed']\n};\n\nexport default CONFIG;","import React, { Component } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass Issue extends Component {\n   render () {\n      return (\n         <Card className=\"mb-2\">\n            <Card.Body>\n               <Card.Title>\n                  <Link to={{ pathname: `/issue/${this.props.data.issueID}` }}>\n                     {this.props.data.issueName}\n                  </Link>\n               </Card.Title>\n               <Card.Text>\n                  {this.props.data.issueDescription.substring(0, 120)}\n                  {this.props.data.issueDescription.length > 120 ? '...' : ''}\n               </Card.Text>\n            </Card.Body>\n         </Card>\n      );\n   }\n}\n\nexport default Issue;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport config from '../Config';\n\nimport Issue from './Issue';\n\nclass IssueList extends Component {\n\n   constructor (props) {\n      super(props);\n      this.state = {\n         loading: false,\n         error: false,\n         issues: []\n      };\n   }\n\n   componentDidMount () {\n      this.loadData(this.loaded);\n   }\n\n   loadData (callback) {\n      this.setState({\n         ...this.state, \n         loading: true\n      });\n      return fetch(`${config.apiUrl}/issue`)\n      .then(response => response.json())\n      .then(\n         callback,       \n         (error) => {\n            callback(null, error);\n         }\n      );\n   }\n\n   loaded = (payload, error = null) => {\n      if (error !== null) {\n         this.setState({\n            ...this.state,\n            loading: false,\n            error: error\n         });\n         return;\n      }\n      this.setState({\n         ...this.state,\n         loading: false,\n         error: false,\n         issues: payload\n      });\n   }\n\n   render () {\n      return (\n         <>\n         <p><Link to=\"/issue/new\">Add New Issue</Link></p>\n         <h2>Issue List</h2>\n         <div className=\"row\">\n            {config.issueStates.map((state, index) => {\n               return (\n                  <div key={index} className=\"col-sm\">\n                  <h3 className=\"issueListState\">{state}</h3>\n                  {\n                     this.state.issues\n                     .filter((issue) => issue.issueState === state)\n                     .map((issue, idx) => { return (<Issue data={issue} key={idx} />); })\n                  }\n                  </div>\n               );\n            })}\n         </div>\n         </>\n      );\n   }\n}\n\nexport default IssueList;","import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\n\nimport config from '../Config';\n\nclass IssueDetails extends Component {\n   constructor (props) {\n      super(props);\n      this.state = {\n         data : {\n            issueID: 0,\n            issueName: '',\n            issueDescription: '',\n            issueState: config.issueStates[0] || '',\n            issueModifiedDate: ''\n         },\n         modified: false,\n         loading: false,\n         error: false,\n         deleted: false,\n         created: false\n      };\n   }\n\n   componentDidMount () {\n      if (this.props.match.params.issueID !== 'new') {\n         this.loadData(this.loaded);\n      }\n   }\n\n   loadData (callback) {\n      this.setState({\n         ...this.state, \n         loading: true\n      });\n      return fetch(`${config.apiUrl}/issue/${this.props.match.params.issueID}`)\n      .then(response => response.json())\n      .then(\n         callback,       \n         (error) => {\n            callback(null, error);\n         }\n      );\n   }\n\n   loaded = (payload, error = null) => {\n      if (error !== null) {\n         this.setState({\n            ...this.state,\n            loading: false,\n            error: error\n         });\n         return;\n      }\n      this.setState({\n         ...this.state,\n         loading: false,\n         error: false,\n         data: payload\n      });\n   }\n\n   create = (event) => {\n      event.preventDefault();\n\n      fetch(`${config.apiUrl}/issue`, {\n         method: 'POST',\n         headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n         },\n         body: JSON.stringify(this.state.data)\n      })\n      .then(response => response.json())\n      .then(\n         (response) => {\n            alert('issue successfully created');\n            debugger;\n            this.setState({\n               ...this.state,\n               data: {\n                  ...this.state.data,\n                  ...response\n               },\n               created: true\n            });\n         },       \n         (error) => {\n            this.setState({\n               ...this.state,\n               error\n            });\n         }\n      );\n   }\n\n   update = (event) => {\n      event.preventDefault();\n\n      fetch(`${config.apiUrl}/issue/${this.state.data.issueID}`, {\n         method: 'PUT',\n         headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n         },\n         body: JSON.stringify(this.state.data)\n      })\n      .then(response => response.json())\n      .then(\n         (response) => {\n            alert('issue successfully saved');\n            this.setState({\n               ...this.state,\n               data: {\n                  ...this.state.data,\n                  ...response\n               }\n            });\n         },       \n         (error) => {\n            this.setState({\n               ...this.state,\n               error\n            });\n         }\n      );\n   }\n\n   remove = (event) => {\n      fetch(`${config.apiUrl}/issue/${this.state.data.issueID}`, {\n         method: 'DELETE'\n      })\n      .then(response => response.json())\n      .then(\n         () => {\n            alert('issue successfully deleted');\n            this.setState({\n               ...this.state,\n               deleted: true\n            });\n         },       \n         (error) => {\n            this.setState({\n               ...this.state,\n               error\n            });\n         }\n      );\n   }\n\n   changeIssueName = (event) => {\n      this.setState({\n         data : {\n            ...this.state.data,\n            issueName: event.target.value\n         },\n         modified: true\n      });\n   }\n\n   changeIssueDescription = (event) => {\n      this.setState({\n         data : {\n            ...this.state.data,\n            issueDescription: event.target.value\n         },\n         modified: true\n      });\n   }\n\n   changeIssueState = (event) => {\n      this.setState({\n         data : {\n            ...this.state.data,\n            issueState: event.target.value\n         },\n         modified: true\n      });\n   }\n\n   render () {\n      if (this.state.deleted || this.state.created) {\n         return (<Redirect to=\"/\" />);\n      }\n\n      const createButton = (\n         <Button variant=\"primary\" type=\"submit\" onClick={this.create}>\n            Create new issue\n         </Button>\n      );\n      const updateButtons = (\n         <>\n         <Button variant=\"primary\" type=\"submit\" onClick={this.update}>\n            Update issue\n         </Button>\n\n         <Button variant=\"danger\" onClick={this.remove}>\n            Delete issue\n         </Button>\n         </>\n      );\n      const buttons = this.props.match.params.issueID === 'new' ? createButton : updateButtons;\n\n      return (\n         <div>\n            <h2 className=\"mt-2 mb-2\">Issue Details</h2>\n            <Form>\n               <Form.Group>\n                  <Form.Label>Issue Name</Form.Label>\n                  <Form.Control \n                     type=\"text\" \n                     onChange={this.changeIssueName} \n                     value={this.state.data.issueName} \n                     className=\"mb-4\"\n                  />\n\n                  <Form.Label>Issue Description</Form.Label>\n                  <Form.Control \n                     as=\"textarea\" \n                     rows=\"3\" \n                     onChange={this.changeIssueDescription} \n                     value={this.state.data.issueDescription} \n                     className=\"mb-4\"\n                  />\n\n                  <Form.Label>Issue State</Form.Label>\n                  <Form.Control \n                     as=\"select\" \n                     onChange={this.changeIssueState} \n                     value={this.state.data.issueState} \n                     className=\"mb-4\"\n                  >\n                  {config.issueStates.map((state, index) => {\n                     console.log(config.issueStates);\n                     const currentStateIndex = config.issueStates.indexOf(this.state.data.issueState);\n                     if (index < currentStateIndex) {\n                        return;\n                     }\n                     return (<option key={index} value={state}>{state}</option>);\n                  })}\n                  </Form.Control>\n\n                  {buttons}\n               </Form.Group>\n            </Form>\n         </div>\n      );\n   }\n}\n\nexport default IssueDetails;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { Navbar } from 'react-bootstrap';\n\nimport IssueList from './components/IssueList';\nimport IssueDetails from './components/IssueDetails';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"xl\">\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\"> \n              <Navbar.Brand as={Link} to=\"/\">Issue Tracker</Navbar.Brand>\n            </Navbar.Collapse>\n          </Navbar>\n\n          <div className=\"App-Container\">\n            <Route path=\"/\" exact component={IssueList} />\n            <Route path=\"/issue/:issueID\" component={IssueDetails} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}